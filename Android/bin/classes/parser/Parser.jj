/**
* Projet d'interpreteur logo
*
* Auteurs :
* Hei-Hong TRAING
* Mickael GONCALVES
* Vincent GUILLEBAUD
* 
*/
options
{
  STATIC = false;
}

PARSER_BEGIN(Parser)
package parser;
import java.util.ArrayList;
import java.util.List;
import java.io.StringReader;

public class Parser
{}

PARSER_END(Parser)

// caractere ne generant pas de token		-------------------------------------------------------
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

// identifiants		-------------------------------------------------------------------------------
TOKEN :
{
  "("
| ")"
| "["
| "]"
| "+"
| "-"
| "*"
| "/"
| ":"
| < ID : (< LETTER >)+ > // primitive
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
| < NUMBER :  < DIGITS > | < DIGITS > "." < DIGITS > >
| < DIGITS :  ([ "0"-"9" ])+ >
}

// primitive logo (une chaine de caractere compose de lettre uniquement)		-------------------
Object primitive() :
{
  Token prim;
}
{
  prim = < ID >
  {
    return (Object) prim.image;
  }
}

// expression -> simpleExp | listExp		-------------------------------------------------------
Object expression() :
{
  List < Object > list = null;
  Object simple = null;
}
{
  simple = simpleExp()
  {
    return simple;
  }
| list = listExp()
  {
    return list;
  }
| < EOF >
  {
    return null;
  }
}

// listExp -> "[" (expression)* "]"		-----------------------------------------------------------
List < Object > listExp() :
{
  @ SuppressWarnings(
  {
    "rawtypes"
  }
  ) List < Object > instrList = new ArrayList < Object > ();
  Object obj;
}
{
  "["
  (
    obj = expression()
    {
      instrList.add(obj);
    }
  )*
  "]"
  {
    return instrList;
  }
}

// simpleExp -> addExp		-----------------------------------------------------------------------
Object simpleExp() :
{
  Object obj = null;
}
{
  obj = addExp()
  {
    return obj;
  }
}

// addExp -> multExp (("+"|"-") multExp)*		-----------------------------------------------------------
Object addExp() :
{
  Object larg;
  Object rarg;
}
{
  larg = multExp()
  (
    "+" rarg = multExp()
    {
      larg = new Double(((Double)larg).doubleValue() + ((Double)rarg).doubleValue());
       
    }
  | "-" rarg = multExp()
    {
      larg = new Double(((Double)larg).doubleValue() - ((Double)rarg).doubleValue());
      
    }
  )*
  {
    //System.out.println("Value of value : "+larg.toString());
    return larg;
  }
}

// multExp -> primaryExp (("*" | "/") primaryExp)*		-------------------------------------------
Object multExp() :
{
  Object larg;
  Object rarg;
}
{
  larg = primaryExp()
  (
    "*" rarg = primaryExp()
    {
       larg = new Double(((Double)larg).doubleValue() * ((Double)rarg).doubleValue());
    }
  | "/" rarg = primaryExp()
    {
       larg = new Double(((Double)larg).doubleValue() / ((Double)rarg).doubleValue());
    }
  )*
  {
    return larg;
  }
}

// primaryExp -> primitive | NUMBER | "(" simpleExp ")"		---------------------------------------
Object primaryExp() :
{
  Token t;
  Object obj;
}
{
  obj = primitive()
  {
    return obj;
  }
| t = < NUMBER >
  {
    obj = t.image;

    return new Double(Double.parseDouble(t.image));
  }
| "(" obj = simpleExp() ")"
  {
    return obj;
  }
}

// variable -> ":"primitive
Object variable() :
{
  Object obj;
}
{
  ":" obj = primitive()
  {
    return obj;
  }
}
